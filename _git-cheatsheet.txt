	-----------------
	|   OPERATIONS  |
	-----------------
git init

git add *
git add <file_path>
git add -i
	interactive add!

git commit -m 'this is initial commit'
git commit -a -m 'small changes'
	adds all tracked files and then commits
git commit --amend -m 'new message'
git commit -a --amend --no-edit
git commit -m "[skip ci]" --allow-empty'
git commit --fixup=HEAD
git commit --fixup=<pointer>

git restore --staged <file_path>
git reset HEAD <file_path>
	both of them unstage a file, does not move branch pointer

git checkout -- <file_path>
git restore <file_path>
	both of them drop changes

rm <file_path>
git rm <file_path>
	if I want to del a staged file, this will del file from $PWD and staged
git rm <file_path> -f
	does both previous cmds in one step
git mv <old_file_path> <new_file_path>
	actually does mv, git rm, git add


	-----------------
	|   BRANCHING   |
	-----------------
git branch
	show branches
git branch <branch_name>
	create new branch
git branch -d <branch_name>
	delete branch
git branch --move <old_branch_name> <new_branch_name>
	rename branch

git checkout <branch_name>
git checkout -b <branch_name>
	create new branch & check it out
git checkout <pointer>
	moves HEAD itself to a different commit, but not branch pointer that HEAD used to point to
git checkout --track origin/<branch_name>
	create a local, editable branch from a fetched tracking branch

git merge <branch_name>
	merge <branch_name> into the current one
git merge --abort
git merge --squash <sidebranch>

git rebase master
	rebase current onto master
	â†’ then I can checkout master and merge (simple fast-forward) the rebased branch

# git rebase --onto master HEAD~2
	DESTRUCTIVE!! rebase current branch onto master by replaying all commits starting with first after pointer
# git rebase --onto <branch1> <branch2>
	when <branch2> is an offshoot from <branch1>, rebase onto master <branch2> commits diverged from <branch1>
	DESTRUCTIVE!! (lose all <branch1> commits)

git rebase -i --autosquash HEAD~3
	interactive rebase, starting from first commit after pointer :)
git rebase --abort

git reset --soft HEAD~1
	move branch pointer HEAD to selected pointer
git reset --mixed HEAD~1
	and unstage files
# git reset --hard HEAD~1
	and reset $PWD = drop changes DESTRUCTIVE!

git cherry-pick <commit_hash>
	pick commit from anywhere (from another branch or orphaned one), and append it on this branch

git merge-base <pointer1> <pointer2>
	get commit hash of common ancestor of the two pointers


	-----------------
	|     VIEWS     |
	-----------------
git status
git status -s
git status -sb
	name of remote branch if exists

git diff
	between $PWD and staged (unstaged changes)
git diff --staged
	between staged and HEAD (staged changes)
git diff <pointer>
git diff master
	diffs between current state and a selected pointer
git diff --name-only HEAD~1
	only filenames. In bash, you can count files: | wc -l

git diff master...<branch_name>
	diffs betwen branch <branch_name> and the last common ancestor with master
git diff master..<branch_name>
	only commits unique to <branch_name> (all diffs not in master)

git log -3
	see last 3 commits
git log --stat -1
	see stats of the last commit
git log -p -1
	see full diff of the last commit
git log --oneline
	one commit per line :)
git log --oneline --graph
	wow it's a graph of branches!

git show <branch_name>
git show <pointer>
	HEAD~1 is like log -1

git blame <file_path>
git grep -n --extended-regexp "regex" "file match pattern"
	serches all present and historic files for regex in files e.g. *.tsx


	-----------------
	|    REMOTES    |
	-----------------
git remote -v
	see remotes (-v with URLs)
git remote add origin git@github.com:user/repository.git
git remote show origin
	details about all branches local and remote

git fetch origin
	just fetches into the local origin/branches
git fetch origin <branch_name>
git pull origin master
	downloads current branch and tries to merge the changes into local (rebase)
git fetch origin master && git branch -f master origin/master
	updates master without having to check it out

git push origin <branch_name>
git push --set-upstream origin <newname>
	rename branch at origin
git push origin --delete <oldname>
	delete branch at origin
git branch --unset-upstream
	disconnect remote tracking

git fetch origin pull/9876/head:<new_branch_name> && git checkout <new_branch_name>
	github only: checkout PR 9876 with deleted branch as a local <new_branch_name>


	--------------
	|    TAGS    |
	--------------
git tag
	shows all tags
git rev-parse <pointer>
		returns commit hash of any pointer, such as a tag name or HEAD~1 or so


	-----------------
	|    STASHES    |
	-----------------
git stash -u
	add tracked and staged to stash, -u means add also untracked
git stash list
git stash apply stash@{n}
	apply stash[n], or just 'git stash apply' to apply stash[0]
git stash show -u -p stash@{n}
	show stash[n], -p to show diffs instead of just files
git stash drop stash@{n}
	delete stash[n]
